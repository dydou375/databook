#!/usr/bin/env python3
"""
Exemple d'utilisation de l'extracteur de livres OpenLibrary
===========================================================

Ce script montre comment utiliser la classe ExtracteurLivres 
pour extraire et analyser les informations des livres.
"""

from extracteur_livres import ExtracteurLivres
import os


def exemple_extraction_simple():
    """Exemple d'extraction simple avec crit√®res de base"""
    print("üìö EXEMPLE D'EXTRACTION SIMPLE")
    print("=" * 50)
    
    # Chemin vers vos fichiers OpenLibrary (√† modifier selon votre configuration)
    chemin_openlibrary = r"C:\Users\dd758\Formation_IA_Greta\Projet_possible certif\Livre_analyse\data_book\databook\data\fichier_openlibrary"
    
    # V√©rifier que le chemin existe
    if not os.path.exists(chemin_openlibrary):
        print(f"‚ùå Chemin non trouv√©: {chemin_openlibrary}")
        print("üí° Modifiez la variable 'chemin_openlibrary' avec le bon chemin")
        return
    
    # Cr√©er l'extracteur
    extracteur = ExtracteurLivres(chemin_openlibrary)
    
    # D√©finir des crit√®res simples
    criteres_simples = {
        'avec_titre': True,      # Livres avec titre
        'avec_isbn': False,      # ISBN pas obligatoire
        'avec_auteur': False,    # Auteur pas obligatoire
    }
    
    # Extraire 500 livres
    print("\nüîç Extraction de 500 livres avec crit√®res simples...")
    livres = extracteur.extraire_editions_echantillon(
        max_livres=500, 
        criteres=criteres_simples
    )
    
    if livres:
        print(f"‚úÖ {len(livres)} livres extraits")
        
        # Analyser les livres
        df = extracteur.analyser_livres_extraits(livres)
        
        # Sauvegarder
        extracteur.sauvegarder_livres(df, "exemple_livres_simples.csv")
        
        return df
    else:
        print("‚ùå Aucun livre extrait")
        return None


def exemple_extraction_avancee():
    """Exemple d'extraction avec crit√®res avanc√©s"""
    print("\nüìö EXEMPLE D'EXTRACTION AVANC√âE")
    print("=" * 50)
    
    chemin_openlibrary = r"C:\Users\dd758\Formation_IA_Greta\Projet_possible certif\Livre_analyse\data_book\databook\data\fichier_openlibrary"
    
    if not os.path.exists(chemin_openlibrary):
        print(f"‚ùå Chemin non trouv√©: {chemin_openlibrary}")
        return
    
    extracteur = ExtracteurLivres(chemin_openlibrary)
    
    # Crit√®res plus stricts
    criteres_avances = {
        'avec_titre': True,
        'avec_isbn': True,        # ISBN obligatoire
        'avec_auteur': True,      # Auteur obligatoire
        'annee_min': 1990,        # Livres depuis 1990
        'annee_max': 2024,        # Jusqu'√† 2024
        'langues': ['eng', 'fre'] # Seulement anglais et fran√ßais
    }
    
    print("üîç Crit√®res avanc√©s:")
    for cle, valeur in criteres_avances.items():
        print(f"   ‚Ä¢ {cle}: {valeur}")
    
    # Extraire 1000 livres
    print(f"\nüîç Extraction avec crit√®res avanc√©s...")
    livres = extracteur.extraire_editions_echantillon(
        max_livres=1000, 
        criteres=criteres_avances
    )
    
    if livres:
        print(f"‚úÖ {len(livres)} livres extraits selon les crit√®res")
        
        # Analyser
        df = extracteur.analyser_livres_extraits(livres)
        
        # Sauvegarder
        extracteur.sauvegarder_livres(df, "exemple_livres_avances.csv")
        
        return df
    else:
        print("‚ùå Aucun livre correspondant aux crit√®res")
        return None


def exemple_analyse_personnalisee(df):
    """Exemple d'analyse personnalis√©e du DataFrame"""
    print("\nüìä EXEMPLE D'ANALYSE PERSONNALIS√âE")
    print("=" * 50)
    
    if df is None or df.empty:
        print("‚ùå Aucun DataFrame √† analyser")
        return
    
    print(f"üìè Dataset: {len(df)} livres")
    
    # Livres avec ISBN-13
    if 'isbn_13' in df.columns:
        avec_isbn13 = df[df['isbn_13'].notna() & (df['isbn_13'] != '')]
        print(f"üìñ Livres avec ISBN-13: {len(avec_isbn13)} ({len(avec_isbn13)/len(df)*100:.1f}%)")
    
    # Livres r√©cents (apr√®s 2000)
    if 'annee_publication' in df.columns:
        livres_recents = df[df['annee_publication'] >= 2000]
        print(f"üÜï Livres r√©cents (‚â•2000): {len(livres_recents)} ({len(livres_recents)/len(df)*100:.1f}%)")
    
    # Livres avec description
    if 'description' in df.columns:
        avec_description = df[df['description'].notna() & (df['description'] != '')]
        print(f"üìù Livres avec description: {len(avec_description)} ({len(avec_description)/len(df)*100:.1f}%)")
    
    # Top 5 des √©diteurs
    if 'editeurs' in df.columns:
        tous_editeurs = []
        for editeurs in df['editeurs'].dropna():
            if editeurs:
                tous_editeurs.extend(editeurs.split(' | '))
        
        if tous_editeurs:
            import pandas as pd
            top_editeurs = pd.Series(tous_editeurs).value_counts().head(5)
            print(f"\nüè¢ TOP 5 √âDITEURS:")
            for i, (editeur, compte) in enumerate(top_editeurs.items(), 1):
                print(f"   {i}. {editeur[:40]}: {compte} livres")
    
    # Livres de qualit√© (avec beaucoup de m√©tadonn√©es)
    if 'score_qualite' in df.columns:
        livres_qualite = df[df['score_qualite'] >= 4]
        print(f"\n‚≠ê Livres de qualit√© (score ‚â•4): {len(livres_qualite)} ({len(livres_qualite)/len(df)*100:.1f}%)")
        
        if len(livres_qualite) > 0:
            print(f"üìö Exemple de livre de qualit√©:")
            livre_exemple = livres_qualite.iloc[0]
            print(f"   Titre: {livre_exemple['titre']}")
            if livre_exemple.get('editeurs'):
                print(f"   √âditeur: {livre_exemple['editeurs'][:50]}")
            if livre_exemple.get('annee_publication'):
                print(f"   Ann√©e: {livre_exemple['annee_publication']}")


def fonction_test_complete():
    """Fonction de test compl√®te pour valider le bon fonctionnement"""
    print("üß™ FONCTION DE TEST COMPL√àTE")
    print("=" * 60)
    
    try:
        # Test 1: Extraction simple
        print("\n1Ô∏è‚É£ Test d'extraction simple...")
        df_simple = exemple_extraction_simple()
        
        if df_simple is not None and not df_simple.empty:
            print("‚úÖ Test extraction simple: R√âUSSI")
        else:
            print("‚ùå Test extraction simple: √âCHEC")
            return False
        
        # Test 2: Extraction avanc√©e
        print("\n2Ô∏è‚É£ Test d'extraction avanc√©e...")
        df_avance = exemple_extraction_avancee()
        
        if df_avance is not None and not df_avance.empty:
            print("‚úÖ Test extraction avanc√©e: R√âUSSI")
        else:
            print("‚ö†Ô∏è Test extraction avanc√©e: Aucun r√©sultat (crit√®res trop stricts)")
        
        # Test 3: Analyse personnalis√©e
        print("\n3Ô∏è‚É£ Test d'analyse personnalis√©e...")
        exemple_analyse_personnalisee(df_simple)
        print("‚úÖ Test analyse personnalis√©e: R√âUSSI")
        
        # Test 4: V√©rification des fichiers cr√©√©s
        print("\n4Ô∏è‚É£ Test de sauvegarde...")
        fichiers_attendus = ["exemple_livres_simples.csv"]
        if df_avance is not None:
            fichiers_attendus.append("exemple_livres_avances.csv")
        
        for fichier in fichiers_attendus:
            if os.path.exists(fichier):
                taille = os.path.getsize(fichier)
                print(f"‚úÖ Fichier cr√©√©: {fichier} ({taille:,} octets)")
            else:
                print(f"‚ùå Fichier manquant: {fichier}")
        
        print("\nüéâ TOUS LES TESTS SONT TERMIN√âS!")
        print("üìÅ V√©rifiez les fichiers CSV cr√©√©s dans le r√©pertoire courant")
        
        return True
    
    except Exception as e:
        print(f"‚ùå Erreur durant les tests: {e}")
        return False


def main():
    """Fonction principale"""
    print("üöÄ EXEMPLE D'UTILISATION - EXTRACTEUR DE LIVRES")
    print("=" * 60)
    print("Ce script d√©montre l'utilisation de l'extracteur de livres OpenLibrary")
    print()
    
    # Lancer la fonction de test compl√®te
    succes = fonction_test_complete()
    
    if succes:
        print("\nüí° UTILISATION PERSONNALIS√âE:")
        print("Vous pouvez maintenant utiliser l'extracteur ainsi:")
        print()
        print("from extracteur_livres import ExtracteurLivres")
        print("extracteur = ExtracteurLivres('chemin/vers/vos/fichiers')")
        print("livres = extracteur.extraire_editions_echantillon(max_livres=1000)")
        print("df = extracteur.analyser_livres_extraits(livres)")
        print("extracteur.sauvegarder_livres(df, 'mes_livres.csv')")
    else:
        print("\n‚ùå Certains tests ont √©chou√©. V√©rifiez:")
        print("   ‚Ä¢ Le chemin vers les fichiers OpenLibrary")
        print("   ‚Ä¢ La pr√©sence des fichiers d'√©ditions")
        print("   ‚Ä¢ Les permissions d'√©criture dans le r√©pertoire")


if __name__ == "__main__":
    main() 