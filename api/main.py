from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from typing import List, Optional
import uvicorn
from datetime import datetime
from contextlib import asynccontextmanager

from models.models import User, UserCreate, UserUpdate, Item, ItemCreate, ItemUpdate
from database.database import get_db, init_db, check_db_connection
from database.crud import user_crud, item_crud
from auth.auth import require_api_key
from config.config import settings

# Import des nouveaux routers
from routes.routes_postgres import postgres_router
from routes.routes_mongo import mongo_router
from routes.routes_real_data import real_data_router
from routes.routes_real_mongo import real_mongo_router
from routes.routes_mongo_livres import mongo_livres_router
from routes.routes_mongo_extras import mongo_extras_router
from routes.auth_routes import auth_router  # Nouveau : routes d'authentification
try:
    from routes.routes_livres import livres_router
    LIVRES_ROUTER_AVAILABLE = True
except ImportError:
    LIVRES_ROUTER_AVAILABLE = False

try:
    from database.mongo_crud import mongodb_service
    MONGODB_AVAILABLE = True
except ImportError:
    MONGODB_AVAILABLE = False
    mongodb_service = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("üöÄ D√©marrage de l'application DataBook API...")
    
    # Initialisation PostgreSQL
    print("üìä Initialisation de PostgreSQL...")
    init_db()
    check_db_connection()
    
    # Initialisation MongoDB
    if MONGODB_AVAILABLE and mongodb_service:
        print("üçÉ Initialisation de MongoDB...")
        try:
            await mongodb_service.connect_async()
        except Exception as e:
            print(f"‚ö†Ô∏è Avertissement: MongoDB non disponible - {e}")
    else:
        print("‚ö†Ô∏è MongoDB non configur√©")
    
    print("‚úÖ Application pr√™te!")
    yield
    
    # Shutdown
    print("üõë Arr√™t de l'application...")
    if MONGODB_AVAILABLE and mongodb_service:
        mongodb_service.disconnect()

# Initialisation de l'application FastAPI
app = FastAPI(
    title="DATA BOOK API",
    description="""
    API pour l'analyse et la gestion des donn√©es de livres
    
    ## Fonctionnalit√©s
    
    * **PostgreSQL** : Base de donn√©es relationnelle pour les donn√©es structur√©es
    * **MongoDB** : Base de donn√©es NoSQL pour l'analyse et les donn√©es flexibles
    * **Authentification** : Cl√© API pour prot√©ger les endpoints sensibles
    * **Recherche avanc√©e** : Recherche textuelle et par filtres
    * **Statistiques** : Analytics et m√©triques en temps r√©el
    
    ## Bases de donn√©es
    
    * **PostgreSQL** : `/postgres/*` - Donn√©es relationnelles
    * **MongoDB** : `/mongo/*` - Donn√©es d'analyse et NoSQL
    
    """,
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Inclusion des routers
app.include_router(postgres_router)
app.include_router(mongo_router)
app.include_router(real_data_router)  # Nouvelles routes pour les vraies donn√©es
app.include_router(real_mongo_router)  # Routes MongoDB pour les vraies collections
app.include_router(mongo_livres_router)  # Routes sp√©cifiques pour livres et critiques MongoDB
app.include_router(mongo_extras_router)  # Routes avanc√©es MongoDB
app.include_router(auth_router)  # Inclure le nouveau router pour les routes d'authentification

# Inclure le nouveau router pour les livres si disponible
if LIVRES_ROUTER_AVAILABLE:
    app.include_router(livres_router)

# Route de base (publique)
@app.get("/")
async def root():
    return {
        "message": "Bienvenue sur l'API DataBook v2.0",
        "description": "API pour l'analyse des donn√©es de livres avec PostgreSQL et MongoDB",
        "version": "2.0.0",
        "timestamp": datetime.now(),
        "docs": "/docs",
        "databases": {
            "postgresql": "/postgres/*",
            "mongodb": "/mongo/*",
            "mongodb_real": "/mongodb/* (vos vraies donn√©es)",
            "mongo_livres": "/mongo-livres/* (üìö livres et üí¨ critiques)",
            "mongo_extras": "/mongo-extras/* (üéØ analytics avanc√©s)",
            "livres": "/livres/*" if LIVRES_ROUTER_AVAILABLE else "‚ùå Non disponible"
        },
        "authentication": {
            "jwt": {
                "login": "/auth/login",
                "token": "/auth/token", 
                "register": "/auth/register",
                "me": "/auth/me",
                "refresh": "/auth/refresh"
            },
            "legacy_api_key": "X-API-Key header (en cours de d√©pr√©ciation)",
            "migration_info": "Nouvelles routes utilisent JWT, anciennes utilisent encore cl√© API"
        },
        "features": [
            "Gestion des livres multi-bases",
            "Recherche avanc√©e",
            "Analytics temps r√©el",
            "Authentification JWT moderne",
            "API s√©curis√©e"
        ]
    }

# Route de sant√© (publique)
@app.get("/health")
async def health_check():
    """V√©rification de l'√©tat de sant√© de l'API et des bases de donn√©es"""
    status = {
        "api": "OK",
        "timestamp": datetime.now(),
        "databases": {}
    }
    
    # Test PostgreSQL
    try:
        check_db_connection()
        status["databases"]["postgresql"] = "connected"
    except Exception as e:
        status["databases"]["postgresql"] = f"error: {str(e)}"
    
    # Test MongoDB
    if MONGODB_AVAILABLE and mongodb_service:
        try:
            if mongodb_service.async_client is not None:
                await mongodb_service.database.list_collection_names()
                status["databases"]["mongodb"] = "connected"
            else:
                status["databases"]["mongodb"] = "not initialized"
        except Exception as e:
            status["databases"]["mongodb"] = f"error: {str(e)}"
    else:
        status["databases"]["mongodb"] = "not configured"
    
    return status

# Routes legacy (maintien de la compatibilit√©)
@app.post("/users/", response_model=User, tags=["Legacy"])
async def create_user(user: UserCreate, db=Depends(get_db), api_key: str = Depends(require_api_key)):
    """Cr√©er un nouvel utilisateur (legacy - utilisez /postgres/users/)"""
    return user_crud.create_user(db, user)

@app.get("/users/", response_model=List[User], tags=["Legacy"])
async def get_users(skip: int = 0, limit: int = 100, db=Depends(get_db), api_key: str = Depends(require_api_key)):
    """R√©cup√©rer la liste des utilisateurs (legacy - utilisez /postgres/users/)"""
    return user_crud.get_users(db, skip=skip, limit=limit)

@app.get("/users/{user_id}", response_model=User, tags=["Legacy"])
async def get_user(user_id: int, db=Depends(get_db), api_key: str = Depends(require_api_key)):
    """R√©cup√©rer un utilisateur par son ID (legacy - utilisez /postgres/users/{user_id})"""
    user = user_crud.get_user(db, user_id)
    if not user:
        raise HTTPException(status_code=404, detail="Utilisateur non trouv√©")
    return user

# Routes legacy pour les livres (redirigent vers PostgreSQL)
@app.get("/books/", response_model=List[Item], tags=["Legacy"])
async def get_books(skip: int = 0, limit: int = 100, db=Depends(get_db)):
    """R√©cup√©rer la liste des livres (legacy - utilisez /postgres/books/)"""
    return item_crud.get_items(db, skip=skip, limit=limit)

@app.get("/books/{book_id}", response_model=Item, tags=["Legacy"])
async def get_book(book_id: int, db=Depends(get_db)):
    """R√©cup√©rer un livre par son ID (legacy - utilisez /postgres/books/{book_id})"""
    book = item_crud.get_item(db, book_id)
    if not book:
        raise HTTPException(status_code=404, detail="Livre non trouv√©")
    return book

@app.post("/books/", response_model=Item, tags=["Legacy"])
async def create_book(book: ItemCreate, db=Depends(get_db), api_key: str = Depends(require_api_key)):
    """Cr√©er un nouveau livre (legacy - utilisez /postgres/books/)"""
    return item_crud.create_item(db, book)

@app.put("/books/{book_id}", response_model=Item, tags=["Legacy"])
async def update_book(book_id: int, book_update: ItemUpdate, db=Depends(get_db), api_key: str = Depends(require_api_key)):
    """Mettre √† jour un livre (legacy - utilisez /postgres/books/{book_id})"""
    book = item_crud.update_item(db, book_id, book_update)
    if not book:
        raise HTTPException(status_code=404, detail="Livre non trouv√©")
    return book

@app.delete("/books/{book_id}", tags=["Legacy"])
async def delete_book(book_id: int, db=Depends(get_db), api_key: str = Depends(require_api_key)):
    """Supprimer un livre (legacy - utilisez /postgres/books/{book_id})"""
    success = item_crud.delete_item(db, book_id)
    if not success:
        raise HTTPException(status_code=404, detail="Livre non trouv√©")
    return {"message": "Livre supprim√© avec succ√®s"}

# Route de recherche globale
@app.get("/search/", tags=["Search"])
async def search_books(
    query: str,
    category: Optional[str] = None,
    database: str = "postgres",  # postgres ou mongo
    db=Depends(get_db)
):
    """Rechercher des livres dans PostgreSQL ou MongoDB"""
    if database == "postgres":
        return item_crud.search_items(db, query, category)
    elif database == "mongo":
        if MONGODB_AVAILABLE and mongodb_service:
            return await mongodb_service.search_books(query, category)
        else:
            raise HTTPException(status_code=503, detail="MongoDB non disponible")
    else:
        raise HTTPException(status_code=400, detail="Base de donn√©es non support√©e. Utilisez 'postgres' ou 'mongo'")

# Routes de statistiques globales
@app.get("/stats/", tags=["Statistics"])
async def get_global_statistics(db=Depends(get_db), api_key: str = Depends(require_api_key)):
    """R√©cup√©rer les statistiques globales des deux bases de donn√©es"""
    postgres_stats = {
        "total_users": user_crud.count_users(db),
        "total_books": item_crud.count_items(db),
    }
    
    try:
        mongo_stats = await mongodb_service.get_statistics()
    except Exception:
        mongo_stats = {"error": "MongoDB non disponible"}
    
    return {
        "postgres": postgres_stats,
        "mongodb": mongo_stats,
        "timestamp": datetime.now()
    }

# Route pour tester la connexion aux bases de donn√©es
@app.get("/db-status/", tags=["System"])
async def database_status(db=Depends(get_db), api_key: str = Depends(require_api_key)):
    """V√©rifier le statut des bases de donn√©es"""
    status = {"timestamp": datetime.now()}
    
    # Test PostgreSQL
    try:
        from sqlalchemy import text
        db.execute(text("SELECT 1"))
        status["postgresql"] = "connected"
    except Exception as e:
        status["postgresql"] = f"error: {str(e)}"
    
    # Test MongoDB
    try:
        await mongodb_service.database.list_collection_names()
        status["mongodb"] = "connected"
    except Exception as e:
        status["mongodb"] = f"error: {str(e)}"
    
    return status

if __name__ == "__main__":
    uvicorn.run(
        "main:app", 
        host="0.0.0.0", 
        port=8000, 
        reload=True,
        log_level="info"
    ) 