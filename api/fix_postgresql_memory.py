#!/usr/bin/env python3
"""
Script pour diagnostiquer et r√©soudre les probl√®mes de m√©moire PostgreSQL
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, shell=True):
    """Ex√©cuter une commande syst√®me"""
    try:
        result = subprocess.run(command, shell=shell, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_postgresql_status():
    """V√©rifier le statut de PostgreSQL"""
    print("üîç V√©rification du statut PostgreSQL...")
    
    # V√©rifier les processus PostgreSQL
    success, stdout, stderr = run_command("tasklist | findstr postgres")
    if success and stdout:
        print("‚úÖ PostgreSQL semble √™tre en cours d'ex√©cution")
        print(f"Processus trouv√©s:\n{stdout}")
    else:
        print("‚ö†Ô∏è Aucun processus PostgreSQL trouv√©")
    
    return success

def check_shared_memory():
    """V√©rifier la m√©moire partag√©e"""
    print("\nüß† V√©rification de la m√©moire partag√©e...")
    
    # Sur Windows, v√©rifier les segments de m√©moire partag√©e
    success, stdout, stderr = run_command('wmic process where "name=\'postgres.exe\'" get ProcessId,PageFileUsage,WorkingSetSize /format:table')
    
    if success:
        print("üìä Utilisation m√©moire PostgreSQL:")
        print(stdout)
    else:
        print("‚ùå Impossible de v√©rifier la m√©moire partag√©e")

def cleanup_postgresql():
    """Nettoyer PostgreSQL"""
    print("\nüßπ Nettoyage PostgreSQL...")
    
    # Commandes de nettoyage
    cleanup_commands = [
        "echo Arr√™t forc√© des processus PostgreSQL...",
        "taskkill /F /IM postgres.exe /T 2>nul || echo Aucun processus PostgreSQL √† arr√™ter",
        "taskkill /F /IM pg_ctl.exe /T 2>nul || echo Aucun pg_ctl √† arr√™ter",
        "echo Nettoyage des fichiers temporaires...",
        "del /Q /S %TEMP%\\postgresql* 2>nul || echo Aucun fichier temp PostgreSQL"
    ]
    
    for cmd in cleanup_commands:
        print(f"Ex√©cution: {cmd}")
        success, stdout, stderr = run_command(cmd)
        if stdout:
            print(f"  Sortie: {stdout.strip()}")
        if stderr and "echo" not in cmd:
            print(f"  Erreur: {stderr.strip()}")

def suggest_postgresql_config():
    """Sugg√©rer une configuration PostgreSQL optimis√©e"""
    print("\n‚öôÔ∏è Configuration PostgreSQL sugg√©r√©e:")
    
    config_suggestions = """
# postgresql.conf - Configuration optimis√©e pour √©viter les probl√®mes m√©moire

# M√©moire partag√©e r√©duite
shared_buffers = 128MB                 # Au lieu de valeurs plus √©lev√©es
effective_cache_size = 1GB             # Ajuster selon votre RAM
work_mem = 4MB                         # R√©duit pour √©viter la surcharge
maintenance_work_mem = 64MB            # R√©duit

# Connexions limit√©es
max_connections = 20                   # R√©duit drastiquement

# M√©moire partag√©e syst√®me
shared_preload_libraries = ''          # D√©sactiver pour r√©duire l'utilisation

# Logging pour diagnostiquer
log_min_messages = warning
log_min_error_statement = error
log_min_duration_statement = 1000     # Log requ√™tes > 1s

# Checkpoints plus fr√©quents mais plus petits
checkpoint_segments = 3               # R√©duit
checkpoint_completion_target = 0.5

# D√©sactiver certaines fonctionnalit√©s pour √©conomiser la m√©moire
autovacuum = off                      # Temporairement
fsync = off                           # DANGER: uniquement pour dev/test
synchronous_commit = off              # DANGER: uniquement pour dev/test
"""
    
    print(config_suggestions)
    
    print("\nüí° Instructions pour appliquer cette configuration:")
    print("1. Trouvez votre fichier postgresql.conf")
    print("2. Sauvegardez-le avant modification")
    print("3. Modifiez les param√®tres ci-dessus")
    print("4. Red√©marrez PostgreSQL")
    print("\n‚ö†Ô∏è ATTENTION: fsync=off et synchronous_commit=off sont DANGEREUX en production!")

def restart_postgresql_service():
    """Red√©marrer le service PostgreSQL"""
    print("\nüîÑ Tentative de red√©marrage PostgreSQL...")
    
    # Chercher les services PostgreSQL
    success, stdout, stderr = run_command('sc query type= service | findstr /i "postgresql"')
    
    if success and stdout:
        print("Services PostgreSQL trouv√©s:")
        print(stdout)
        
        # Essayer de red√©marrer
        restart_commands = [
            'net stop "postgresql-x64-14" 2>nul || echo Service non trouv√© avec ce nom',
            'timeout /t 5',
            'net start "postgresql-x64-14" 2>nul || echo Impossible de d√©marrer avec ce nom'
        ]
        
        for cmd in restart_commands:
            print(f"Ex√©cution: {cmd}")
            success, stdout, stderr = run_command(cmd)
            if stdout:
                print(f"  Sortie: {stdout.strip()}")
    else:
        print("‚ùå Aucun service PostgreSQL trouv√©")

def create_lightweight_test():
    """Cr√©er un test l√©ger pour PostgreSQL"""
    test_script = """
import psycopg2
import os

# Configuration all√©g√©e pour test
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://user:password@localhost:5432/dbname")

def test_light_connection():
    try:
        # Connexion avec param√®tres optimis√©s
        conn = psycopg2.connect(
            DATABASE_URL,
            options="-c default_transaction_isolation=autocommit"
        )
        
        cursor = conn.cursor()
        
        # Requ√™te ultra-simple
        cursor.execute("SELECT 1 as test")
        result = cursor.fetchone()
        
        print(f"‚úÖ Test PostgreSQL r√©ussi: {result}")
        
        # Test de la table livre (simple)
        cursor.execute("SELECT COUNT(*) FROM livre LIMIT 1")
        count = cursor.fetchone()[0]
        print(f"üìö Nombre de livres: {count}")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test PostgreSQL: {e}")
        return False

if __name__ == "__main__":
    test_light_connection()
"""
    
    with open("test_postgresql_light.py", "w", encoding="utf-8") as f:
        f.write(test_script)
    
    print("\nüìù Script de test l√©ger cr√©√©: test_postgresql_light.py")
    print("Utilisez ce script pour tester PostgreSQL avec une charge minimale")

def main():
    """Fonction principale"""
    print("üöë Script de diagnostic et r√©paration PostgreSQL")
    print("=" * 50)
    
    # 1. V√©rifier le statut
    check_postgresql_status()
    
    # 2. V√©rifier la m√©moire
    check_shared_memory()
    
    # 3. Proposer le nettoyage
    response = input("\nüßπ Voulez-vous nettoyer PostgreSQL ? (y/n): ")
    if response.lower() in ['y', 'yes', 'o', 'oui']:
        cleanup_postgresql()
    
    # 4. Proposer le red√©marrage
    response = input("\nüîÑ Voulez-vous red√©marrer PostgreSQL ? (y/n): ")
    if response.lower() in ['y', 'yes', 'o', 'oui']:
        restart_postgresql_service()
    
    # 5. Afficher la configuration sugg√©r√©e
    suggest_postgresql_config()
    
    # 6. Cr√©er le test l√©ger
    create_lightweight_test()
    
    print("\n‚úÖ Diagnostic termin√©!")
    print("\nüí° Solutions recommand√©es:")
    print("1. Utilisez les endpoints /hybrid-lite/* pour des requ√™tes optimis√©es")
    print("2. Limitez les r√©sultats √† 5-10 par requ√™te")
    print("3. √âvitez les JOINs complexes")
    print("4. Red√©marrez votre syst√®me si le probl√®me persiste")

if __name__ == "__main__":
    main() 